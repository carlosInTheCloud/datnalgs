package search

import "fmt"
func Print() {
	fmt.Println("just so it doesn't complain about importing fmt")
}

// Given an unsorted array, return true if d exists
// in the array, false otherwise.
// worst time complexity: O(n)
func LinearUnsortedSearch(v []int, d int) bool {
	return false
}

// Given an sorted array, return true if d exists
// in the array, false otherwise.
// worst time complexity: O(n)
func LinearSortedSearch(v []int, d int) bool {
	return false
}

// Given an sorted array, return true if d exists
// in the array, false otherwise.
// worst time complexity: O(log n)
func BynarySearch(v []int, d int) bool {
	return false
}

func FibonacciSearch(v []int, d int) bool {
	return false
}

// Write a metod that will return the sum of all the integer
// array elements given array as an input argument
func SumArrayItems(v []int) int {
	return 0
}

// Given an array of n numbers,
// return the duplicate elements in the array
// Use a map
//TC:O(n), SC:O(n)
func FindDupsMap(v []int) []int {

	return []int{}
}

// Given an array of n numbers,
// return the duplicate elements in the array
//TC: O(nlogn), SC: O(n)
func FindDupsSorting(v []int) []int {
	return []int{}
}

// Remove Dups from Array.
// TC: O(n), SC: O(1)
func RemoveDups(data []int) []int {
	return []int{}
}

// Remove Dups without Sorting
// TC: O(n), SC: O(n)
func RemoveDupsMap(v []int) []int {
	return []int{}
}

// Given an array with values that start at 1, find the missing number.
// TC: O(n.log(n)), SC: O(n) if using merge sort.
func FindMissingNumber(v []int) (int, bool) {
	return 0, false
}

// find missing number using a map.
// TC: O(n), SC: O(n)
func FindMissingNumberMap(v []int) (int, bool) {
	return 0, false
}

// find missing number using Sumation strategy.
// TC: O(n), SC: O(1)
func FindMissingNumberSum(v []int) (int, bool) {
	return 0, false
}
