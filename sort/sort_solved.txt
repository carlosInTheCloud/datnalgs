package sort

import (
	"fmt"
	"math"
)

// Bubble Sort:
// TC: O(n^2)
// SC:O(1)
func BubbleSort(v []int) {
	swap := true
	s := len(v) - 1

	for i := 0; i < s && swap; i++ {
		swap = false
		for j := 0; j < s-i; j++ {
			if v[j] > v[j+1] {
				v[j], v[j+1] = v[j+1], v[j]
				swap = true
			}
		}
	}
}

// TC: O(n^2)
// SC:O(1)
// technique: move forward in the outer loop and check for greater values backwards in the inner loop.
func InsertionSort(v []int) {
	s := len(v)
	var j, t int

	for i := 1; i < s; i++ {
		t = v[i]
		for j = i; j > 0 && v[j-1] > t; j-- {
			v[j] = v[j-1]
		}
		v[j] = t
	}
}

// Selection sort keeps tabs of the index of the least value in the array
// in the inner loop by comparing the value at the min index with the value at the innner loop index,
// then places that small value at the current index of
// the outerloop. the inner loop must start at the index of the outer loop
// TC: O(n^2)
// SC:O(1)
func SelectionSort(v []int) {
	size := len(v)
	var m int
	for i := 0; i < size-1; i++ {
		m = i
		for j := i + 1; j < size; j++ {
			if v[j] < v[m] {
				m = j
			}
		}
		v[i], v[m] = v[m], v[i]
}
}

// TC: )(nlog n)
// SC: O(n)
func MergeSort(v []int) {
	s := len(v)
	vt := make([]int, s)
	mergeDivide(v, vt, 0, s-1)
}

func mergeDivide(v, vt []int, l, u int) {
	if l >= u {
		return
	}
	m := (l + u) / 2
	mergeDivide(v, vt, l, m)
	mergeDivide(v, vt, m+1, u)
	mergeSorter(v, vt, l, m, u)
}

func mergeSorter(v, vt []int, l, m, u int) {
	ls := l
	us := m + 1
	c := l
	for ls <= m && us <= u {
		if v[ls] <= v[us] {
			vt[c] = v[ls]
			ls++
		} else {
			vt[c] = v[us]
			us++
		}
		c++
	}
	for ls <= m {
		vt[c] = v[ls]
		ls++
		c++
	}
	for us <= u {
		vt[c] = v[us]
		us++
		c++
	}
	for i := l; i <= u; i++ {
		v[i] = vt[i]
	}
}

// Avg TC: O(n log n)
// WTC: O(n^2)
// Best SC:O(log n)
// WSC: O(n)
func Quicksort(v []int) {
	s := len(v) - 1
	quickSorter(v, 0, s)
}

func quickSorter(v []int, l, u int) {
	if l >= u {
		return
	}

	p := v[l]
	st := l
	sp := u
	for l < u {
		for v[l] <= p && l < u {
			l++
		}
		for v[u] > p && l <= u {
			u--
		}
		if l < u {
			v[l], v[u] = v[u], v[l]
		}
	}

	v[st], v[u] = v[u], v[st]
	quickSorter(v, st, u-1)
	quickSorter(v, u+1, sp)
}

// TC: O(n + k)
// SC: O(n + k)
func CountSort(v []int, lr, ur int) {
	s := len(v)
	r := ur - lr
	vc := make([]int, r)

	for i := 0; i < s; i++ {
		vc[v[i]-lr]++
	}
	j := 0
	for i := 0; i < r; i++ {
		for ; vc[i] > 0; vc[i]-- {
			v[j] = i + lr
			j++
		}
	}
}

// TC: O(n *d) where d is the number of digits in the largest number in the array
// SC: O(n + k) where k is the range of the range of the input. for base 10, k = 10
func RadixSort(v []int) {
	s := len(v)
	mx := v[0]
	for _, x := range v {
		if mx < x {
			mx = x
		}
	}
	for d := 1; mx/d > 0; d *= 10 {
		radixSorter(v, s, d)
	}
}

func radixSorter(v []int, s, d int) {
	vt := make([]int, s)
	copy(vt, v[:])
	vc := make([]int, 10)
	for i := 0; i < s; i++ {
		vc[(vt[i]/d)%10]++
	}
	for i := 1; i < 10; i++ {
		vc[i] += vc[i-1]
	}
	for i := s - 1; i >= 0; i-- {
		v[vc[(vt[i]/d)%10]-1] = vt[i]
		vc[(vt[i]/d)%10]--
	}
}

// Avg TC: O(n log n)
// W TC: O (n^2)
// SC: O(1)
func shellsort(v []int) {
	s := len(v)
	for g := s / 2; g > 0; g /= 2 {
		for i := g; i < s; i++ {
			t := v[i]
			j := i
			for ; j >= g && v[j-g] > t; j -= g {
				v[j] = v[j-g]
			}
			v[j] = t
		}
	}
}

// Avg TC: O(n + k) where k is the number of buckets
// Worst TC: O(n^2)
// SC: O(n + k)
func BucketSort(v []int) {
	s := len(v)
	b := int(math.Sqrt(float64(s)))
	vb := make([][]int, b)
	mx := v[0]
	for _, x := range v {
		if mx < x {
			mx = x
		}
	}
	d := int(math.Ceil(float64(mx / b)))
	for _, x := range v {
		idx := x / d
		if idx >= b {
			idx = b - 1
		}
		vb[idx] = append(vb[idx], x)
	}
	j := 0
	for _, vt := range vb {
		SelectionSort(vt)
		for _, x := range vt {
			v[j] = x
			j++
		}
	}
}

func Partition01Sort(v []int) {
	l := 0
	u := len(v) - 1

	for l < u {
		if v[l] == 0 {
			l++
		}
		if v[u] == 1 {
			u--
		}
		if l < u {
			v[l], v[u] = v[u], v[l]
		}
	}
}

func Partition012Sort(v []int) {
	l := 0
	u := len(v) - 1
	i := 0

	for i <= u {
		if v[i] == 0 {
			v[i], v[l] = v[l], v[i]
			l++
			i++
		} else if v[i] == 2 {
			v[i], v[u] = v[u], v[i]
			u--
		} else {
			i++
		}
	}
}

// Find the minimum number of swaps required to bring all elementes less than the given value
// together at the start of the array
// given the input [2,7, 5, 6, 1, 3, 4, 9, 10, 8
// and the key value 10, the expected minumum number of swap should be 2.
func MinSwaps(v []int, k int) int {
	c := 0
	l := 0
	u := len(v) - 1

	for l < u {
		for v[l] < k {
			l++
		}
		for v[u] > k {
			u--
		}
		if l < u {
			v[l], v[u] = v[u], v[l]
			c++
		}
	}

	return c
}

func EvenOdd(v []int) {
	l := 0
	u := len(v) - 1

	for l < u {
		for v[l]%2 == 0 {
			l++
		}
		for v[u]%2 != 0 {
			u--
		}
		if l < u {
			v[l], v[u] = v[u], v[l]
		}
	}
}

func SortArrays(v1, v2 []int) {
	l1 := 0
	u1 := len(v1) - 1
	u2 := len(v2) - 1

	for l1 <= u1 {
		if v1[l1] <= v2[0] {
			l1++
		} else {
			v1[l1], v2[0] = v2[0], v1[l1]
			l1++
			for l2 := 0; l2 < u2 && v2[l2] >= v2[l2+1]; l2++ {
				v2[l2], v2[l2+1] = v2[l2+1], v2[l2]
			}
		}
	}
}
func CheckReverse(v []int) bool {
	s := len(v) - 1
	st := -1
	stp := -1
	for i := 0; i < s; i++ {
		if v[i] > v[i+1] {
			st = i
			break
		}
	}
	if st == -1 {
		return true
	}
	for i := st; i < s; i++ {
		if v[i] < v[i+1] {
			stp = i
			break
		}
	}
	if stp == -1 {
		return true
	}
	if v[st-1] > v[stp] || v[stp+1] < v[st] {
		return false
	}
	for i := stp + 1; i < s; i++ {
		if v[i] > v[i+1] {
			return false
		}
	}
	return true
}

func CheckReverseWIthComments(v []int) bool {
	s := len(v) - 1
	st := -1
	stp := -1

	fmt.Println("Looping on start check...")
	for i := 0; i < s; i++ {
		fmt.Printf("i:%v. Checking for v[i]{%v} > v[i+1]{%v}...\n", i, v[i], v[i+1])
		if v[i] > v[i+1] {
			st = i
			fmt.Printf("st = i{%v}. Breaking...\n", i)
			break
		}
	}

	fmt.Println("Checking for st:", st)
	if st == -1 {
		fmt.Println("Returning true!")
		return true
	}

	fmt.Println("Checking for stop index...")
	for i := st; i < s; i++ {
		fmt.Printf("i:%v; Checking for v[i]{%v} < v[i+1]{%v}...\n", i, v[i], v[i+1])
		if v[i] < v[i+1] {
			fmt.Printf("st = i{%v}. Breaking...\n", i)
			stp = i
			break
		}
	}
	fmt.Printf("Checking for stp {%v} == -1...\n", stp)
	if stp == -1 {
		fmt.Println("returning true...")
		return true
	}

	fmt.Printf("Checking if v[st{%v}-1]{%v} > v[stp{%v}]{%v} || v[stp{%v}+1]{%v} < v[st{%v}]{%v}...\n",
		st, v[st-1], stp, v[stp], stp, v[stp+1], st, v[st])
	if v[st-1] > v[stp] || v[stp+1] < v[st] {
		fmt.Println("Returning false..")
		return false
	}
	fmt.Println("Final loop...")
	for i := stp + 1; i < s; i++ {
		fmt.Printf("Checking for v[i{%v]{%v} > v[i+1]{%v}...\n", i, v[i], v[i+1])
		if v[i] > v[i+1] {
			fmt.Println("returning true")
			return false
		}
	}
	fmt.Println("ending function returning true...")
	return true
}

func UnionIntersect(v1, v2 []int) ([]int, []int) {
	InsertionSort(v1)
	InsertionSort(v2)
	s1 := len(v1)
	s2 := len(v2)
	l1 := 0
	l2 := 0
	vu := []int{}
	vi := []int{}

	for l1 < s1 && l2 < s2 {
		if v1[l1] == v2[l2] {
			vu = append(vu, v1[l1])
			vi = append(vi, v1[l1])
			l1++
			l2++
		} else if v1[l1] < v2[l2] {
			vu = append(vu, v1[l1])
			l1++
		} else {
			vu = append(vu, v2[l2])
			l2++
		}
	}
	for l1 < s1 {
		vu = append(vu, v1[l1])
		l1++
	}
	for l2 < s2 {
		vu = append(vu, v2[l2])
		l2++
	}

	return vu, vi
}

// given an array, you need to rotate its elements at k number of times. For example, and Array [10,20, 30, 40, 50, 60]
// rotated by 2 positions = [30, 40, 60, 10, 20]
func RotateArray(v []int, k int) {
	s := len(v) - 1
	reverseArray(v, 0, k-1)
	reverseArray(v, k, s)
	reverseArray(v, 0, s)
}

func reverseArray(v []int, l, u int) {
	for l < u {
		v[l], v[u] = v[u], v[l]
		l++
		u--
	}
}

// Given an array containing unsorted values from 0 to n-1, where n is the size of the array, sort the array.
// Values at any given index could have a -1 value.
func IndexZeroSort(v []int) {
	s := len(v)
	t := 0
	for i := 0; i < s; i++ {
		for v[i] != -1 && v[i] != i {
			t = v[i]
			v[i] = v[t]
			v[t] = t
		}
	}
}

func IndexOneToNSort(v []int) {
	s := len(v)
	var t int
	for i := 0; i < s; i++ {
		for v[i] != i+1 {
			t = v[i]
			v[i] = v[t-1]
			v[t-1] = t
		}
	}
}

// given an ascending sorted array, rearange so that
// the parttern follows a max,min sort.
// example: given the arrau [1,2,3,4,5,6,7]
// the output should be [7,1,6,2,5,3,4]
// [7,6,5,4,3,2,1]
func MaxMinSort(v []int) {
	s := len(v)
	for i := 0; i < s; i++ {
		reverseArray(v, i, s-1)
	}
}

func MaxCircularSum(v []int) int {
	s := len(v)
	sa := 0
	cv := 0
	mcs := 0

	for i := 0; i < s; i++ {
		sa += v[i]
		cv += v[i] * i
	}
	for i := 1; i < s; i++ {
		cv = cv + sa - s*v[s-i]
		if cv > mcs {
			mcs = cv
		}
	}

	return mcs
}
