package bit

func And(a, b int) int {
	return a & b
}

func Or(a, b int) int {
	return a | b
}

func Xor(a, b int) int {
	return a ^ b
}

// divide an integer by 2 without using the / operator
func DivideBy2(x int) int {
	r := x >> 1
	return r
}

// multiply by 8 without using the multiplication operator.
func MultiplyBy8(x int) int {
	r := x << 3
	return r
}

// Once complement of a number
func OnceComplement(a int) int {
	return -a - 1
}

func TwoComplement(a int) int {
	return -a
}

/*
Subtract 5 -3 Bynary using two's complement.
0101 -> 5
0011 -> 3
1100
1101 -> -3 twos complement

        0101
        1101
----------------
       11 1
        0010 --> Throw away the last digit since we're only taking the 4 most significant bits 
*/

/*
Multiply 5 -3 Bynary using two's complement.
5	-> 0101
-3	->	0011
	-> 1100
	-> 1101	//add 1.
// sign extend to the next byte
	         00000101 
*				11111101
---------------------
            00000101
           00000000 
          00000101  		  
         00000101   
        00000101    
       00000101     
      00000101      
     00000101       
    00000101        
-------------------- 
         111111111    
       0100111110001 
--------------------
			  11110001 //twos complement -15
			  00001110
						1	//add one
			  00001111 //8+4+2+1
			  10001111	//since the twos complement left most digit was negative, we reset it back after the conversion to persist the signing. 
*/

//Check if Kth Bit is set
func KthBitCheck(a, k int) bool {
	return a&(1<<(k-1)) > 0
}

// Set the Kth bit in a number
func KthBitSet(a, k int) int {
	return a |  1 << (k -1)
}

//Reset the Kth bit in a number
func KthBitReset(a, k int) int {
	return a & ^(1 << (k -1))
}

//Find if a number is a power of 2
func IsPwerOf2(a int) bool {
	if a&(a-1) == 0 {
		return true
	}
	return false
}

//Count the set bits in a number
func CountBits(a int) int {
	c := 0
	for a > 0 {
		c++
		a = a & (a -1)
	}
	return c
}


